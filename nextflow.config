// The database_dir  and database_name 
// NOTE: Change the params "conda_envs_path, outdir, and reads" only. Leave everything else as is!
// For slurm, podman or any other workload managers, please edit individual profiles to allocate resources.

params {
    projectDir           =      "abo-analysis-pipeline"

    // EDIT THE FOLLOWING 3 LINES ------
    conda_envs_path     =       "/data/conda-envs"
	outdir              =       "/data/ABO-analysis-31-Oct-2023/ABO_results_minimap2_22_02_2024"
	reads               =       "/data/ABO-analysis-31-Oct-2023/fastq/*.fastq"
    
    // File that replaces order# with grid# in the samples deobfuscation process
    renaming_file       =        ""
	skip_renaming       =        false // replaceing order # with grid #; needs $params.deobfuscation
    // Typically, most users wont need to run this renaming and both params should be modifies to:

    // deobfuscation       =        false
	// skip_renaming       =        true   

    // END OF EDIT. LEAVE THE REST OF THIS CONFIG UNTOUCHED ------ 
	
    exonsix             =        "${projectDir}/assets/A1_01_01_1_reference_Exon6.fasta"
	exonseven           =        "${projectDir}/assets/A1_01_01_1_reference_Exon7.fasta"
	database            =        "${projectDir}/assets/ABO_Database.fasta"
	logo                =        "${projectDir}/assets/PathWestlogo.png"
    abomain             =        "python ${projectDir}/bin/AnalyzeAbo_Main.py"
    
	help                =        false
	license             =        false
	version             =        false
	nostrip             =        false
	skip_multiqc        =        false
	multiqc_config      =        false
}

// NO EDITS REQUIRES BELOW THIS LINE EXCEPT FOR SLURM, PODMAN, or OTHER WORKLOAD MANAGERS UNDER PROFILES (BOTTOM OF CONFIG FILE)
timeline {
    enabled             =       true
    file                =       "${params.outdir}/execution_timeline.html"
    timeline.overwrite  =       true
}       

report {        
    enabled             =       true
    file                =       "${params.outdir}/execution_report.html"
    report.overwrite    =       true
}       

trace {     
    enabled             =       true
    file                =       "${params.outdir}/execution_trace.txt"
    trace.overwrite     =       true
}       

dag {       
    file                =       "${params.outdir}/pipeline_dag.svg"
}       

// Avoid this error:
// WARNING: Your kernel does not support swap limit capabilities or the cgroup is not mounted. Memory limited without swap.
// Testing this in after discussion here https://github.com/nf-core/tools/pull/351, 
// once this is established and works well, nextflow might implement this behavior as new default.

docker.runOptions       =       '-u \$(id -u):\$(id -g)'
podman.runOptions       =       '-u \$(id -u):\$(id -g)'

// Capture exit codes from upstream processes when piping
process.shell           =       ['/bin/bash', '-euo', 'pipefail']

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
                return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
                return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
                return obj
        }
    }
}


manifest {
    name                =        'ABOtyper'
    author              =        'Fredrick Mobegi'
    homePage            =        'https://github.com/fmobegi/abo-analysis:latest'
    description         =        'A pipeline to determine ABO type using Oxford nanopore minION reads.'
    mainScript          =        'main.nf'
    nextflowVersion     =        '>=21'
    version             =        '0.1'
}


// eval "$(conda shell.bash hook)"
conda.enabled           =       true
docker.registry         =       'docker.io'
podman.registry         =       'docker.io'


profiles {
    debug {
        dumpHashes             =        true
        process.beforeScript   =        'echo $HOSTNAME'
        cleanup = false     
        }       
    standard {      
        process.container      =        'fmobegi/abo-analysis:latest'
        docker.enabled         =        true
        }       
    slurm {     
        process.container      =        'fmobegi/abo-analysis:latest'
        process.executor       =        'slurm'
        singularity.enabled    =        true
        conda.enabled          =        true
        // Set the queue to submit jobs
        process.queue          =        'your_slurm_queue_name'

        // Set the number of CPUs required for each task
        // The placeholder ${task.cpus} refers to the number of CPUs defined for each process/task
        process.cpus           =        task.cpus

        // Set the amount of memory required for each task
        // The placeholder ${task.memory.toMega()} converts the memory value to megabytes
        process.memory         =        task.memory.toMega()

        // Set the maximum runtime for each task in seconds
        // The placeholder ${task.time.toSeconds()} converts the time value to seconds
        process.time           =        task.time.toSeconds()
        }
    batch {
        workDir                =        's3://cbcrg-eu/work'
        process.container      =        'fmobegi/abo-analysis:latest' 
        process.executor       =        'awsbatch'
        process.queue          =        'demo'
        executor.awscli        =        '/home/ec2-user/miniconda/bin/aws'
        aws.region             =        'eu-west-1'    
        }       
    conda {     
        process.conda          =        "$baseDir/assets/conda.yml"
        conda.cacheDir         =        "$params.conda_envs_path"
        conda.enabled          =        true
        docker.enabled         =        false
        singularity.enabled    =        false
        podman.enabled         =        false
        shifter.enabled        =        false
        charliecloud.enabled   =        false
        apptainer.enabled      =        false
        }       
    mamba {     
        process.conda          =        "$baseDir/assets/conda.yml"
        conda.cacheDir         =        "$params.conda_envs_path"
        conda.enabled          =        true
        conda.useMamba         =        true
        docker.enabled         =        false
        singularity.enabled    =        false
        podman.enabled         =        false
        shifter.enabled        =        false
        charliecloud.enabled   =        false
        apptainer.enabled      =        false
        }       
    docker {        
        docker.enabled         =        true
        process.container      =        'fmobegi/abo-analysis:latest'
        docker.userEmulation   =        true
        conda.enabled          =        false
        singularity.enabled    =        false
        podman.enabled         =        false
        shifter.enabled        =        false
        charliecloud.enabled   =        false
        apptainer.enabled      =        false
        }       
    arm {       
        docker.runOptions      =        '-u $(id -u):$(id -g) --platform=linux/amd64'
        }
    singularity {
        conda.enabled = false
        singularity.enabled    =        true
        singularity.autoMounts =        true
        conda.enabled          =        false
        docker.enabled         =        false
        podman.enabled         =        false
        shifter.enabled        =        false
        charliecloud.enabled   =        false
        apptainer.enabled      =        false
        }       
    podman {        
        podman.enabled         =        true
        conda.enabled          =        false
        docker.enabled         =        false
        singularity.enabled    =        false
        shifter.enabled        =        false
        charliecloud.enabled   =        false
        apptainer.enabled      =        false
        }       
    shifter {       
        shifter.enabled        =        true
        conda.enabled          =        false
        docker.enabled         =        false
        singularity.enabled    =        false
        podman.enabled         =        false
        charliecloud.enabled   =        false
        apptainer.enabled      =        false
        }       
    charliecloud {      
        conda.enabled = false       
        charliecloud.enabled   =        true
        conda.enabled          =        false
        docker.enabled         =        false
        singularity.enabled    =        false
        podman.enabled         =        false
        shifter.enabled        =        false
        apptainer.enabled      =        false
        }       
    apptainer {     
        apptainer.enabled      =        true
        conda.enabled          =        false
        docker.enabled         =        false
        singularity.enabled    =        false
        podman.enabled         =        false
        shifter.enabled        =        false
        charliecloud.enabled   =        false
        }
    }
